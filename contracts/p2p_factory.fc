#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";

global slice storage::owner_address;     ;; MsgAddressInt - Factory owner internal address
global int storage::p2p_next_id;         ;; Uint64 - next_item_index (to match TEP-62)
global cell storage::content;            ;; Cell - contract's metadata
global cell storage::p2p_code;           ;; Cell - P2P Contract BOC
global cell storage::p2p_jetton_code;    ;; Cell - P2P Jetton Contract BOC
global cell storage::moderators;         ;; Cell (HashmapE <Address, bool>) - Moderators

() load_data() impure inline {
    slice ds = get_data().begin_parse();

    storage::owner_address = ds~load_msg_addr();
    storage::p2p_next_id = ds~load_uint(64);
    storage::content = ds~load_ref();
    storage::p2p_code = ds~load_ref();
    storage::p2p_jetton_code = ds~load_ref();
    storage::moderators = ds~load_dict();
}

() save_data() impure inline {
    set_data(                                       ;; 267 + 64 = 331b ;; refs = 4
        begin_cell()
            .store_slice(storage::owner_address)
            .store_uint(storage::p2p_next_id, 64)
            .store_ref(storage::content)
            .store_ref(storage::p2p_code)
            .store_ref(storage::p2p_jetton_code)
            .store_dict(storage::moderators)   
        .end_cell()                                 
    );                                              ;; total global variables = 6
}

int check_deploy_access(slice check_address, cell moderators) impure inline {
    (_, int success) = moderators.dict_get?(267, check_address);
    if(success) {
        return true;
    } else { return false; }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()) {
        return();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    int fwd_fee_from_msg = cs~retrieve_fwd_fee();
    int fwd_fee = get_original_fwd_fee(WORKCHAIN, fwd_fee_from_msg);

    if(flags & 1) {
        return();
    }

    load_data();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if(op == op::comment_message) {
        return();
    }

    if(op == op::deploy_p2p) {
        throw_unless(err::unauthorized_access, equal_slices(sender_address, storage::owner_address) | 
                                               check_deploy_access(sender_address, storage::moderators));
        throw_unless(err::out_of_gas, msg_value >= gas::transaction + gas::deploy_value);

        int item_index = in_msg_body~load_uint(64);
        throw_unless(err::wrong_index, item_index <= storage::p2p_next_id);

        int forward_ton_amount = in_msg_body~load_coins();
        throw_unless(err::out_of_gas, forward_ton_amount >= gas::min_for_storage);

        cell p2p_content = in_msg_body~load_ref();
        slice p2p_inner_cell_slice = in_msg_body~load_ref().begin_parse();

        deploy_p2p(
            forward_ton_amount, 
            item_index, 
            p2p_inner_cell_slice~load_msg_addr(), 
            p2p_inner_cell_slice~load_msg_addr(),
            p2p_inner_cell_slice~load_msg_addr(),
            p2p_content,
            in_msg_body~load_coins(),
            in_msg_body~load_coins(),
            in_msg_body~load_coins(),
            in_msg_body~load_uint(32),
            storage::p2p_code);

        storage::p2p_next_id += 1;

        save_data();

        return();
    }

    if(op == op::deploy_p2p_jetton) {
        throw_unless(err::unauthorized_access, equal_slices(sender_address, storage::owner_address) | 
                                               check_deploy_access(sender_address, storage::moderators));
        throw_unless(err::out_of_gas, msg_value >= gas::transaction + gas::deploy_value);

        int item_index = in_msg_body~load_uint(64);
        throw_unless(err::wrong_index, item_index <= storage::p2p_next_id);

        int forward_ton_amount = in_msg_body~load_coins();
        throw_unless(err::out_of_gas, forward_ton_amount >= gas::min_for_storage);

        cell p2p_content = in_msg_body~load_ref();
        slice p2p_inner_cell_slice = in_msg_body~load_ref().begin_parse();

        deploy_p2p_jetton(
            forward_ton_amount, 
            item_index,
            in_msg_body~load_msg_addr(),       ;; jetton_master address 
            p2p_inner_cell_slice~load_msg_addr(), 
            p2p_inner_cell_slice~load_msg_addr(),
            p2p_inner_cell_slice~load_msg_addr(),
            p2p_content,
            in_msg_body~load_coins(),
            in_msg_body~load_coins(),
            in_msg_body~load_coins(),
            in_msg_body~load_uint(32),
            storage::p2p_jetton_code);

        storage::p2p_next_id += 1;

        save_data();

        return();
    }

    ;; Owner methods

    throw_unless(err::unauthorized_access, equal_slices(sender_address, storage::owner_address));
    
    if(op == op::add_moderator) {
        slice new_moderator = in_msg_body~load_msg_addr();
        (_, int success) = storage::moderators.dict_get?(267, new_moderator);

        if(success) {
            throw(err::moderator_exists);
        }
        else {
            int counter = 0;
            cell tmp = storage::moderators;
            do {
               var (_, _, f?) = tmp~dict::delete_get_min(267);
               if(f?) {
                counter += 1;
                if(counter == const::moderators_max) {
                    throw(err::too_much);
                }
               } 
            } until( ~ f?);
            storage::moderators~dict_set(267, new_moderator, new_moderator);
            send_message_with_comment(flags::bounceable, sender_address, 0, "Moderator added successfully", mode::carry_remaining_gas);
        }
        
        save_data();
        return();
    }

    if(op == op::remove_moderator) {
        slice remove_moderator = in_msg_body~load_msg_addr();
        (_, int success) = storage::moderators.dict_get?(267, remove_moderator);
      
        if(success) {
            storage::moderators~dict_delete?(267, remove_moderator);
            send_message_with_comment(flags::bounceable, sender_address, 0, "Moderator removed successfully", mode::carry_remaining_gas);

            save_data();
            return();
        } else {
            throw(err::no_moderator_to_remove);
        }
    }

    if(op == op::change_moderators) {
        cell new_moderators = in_msg_body~load_dict();
        cell tmp = new_moderators;
        int counter = 0;
        ifnot(dict_empty?(new_moderators)) {
            do {
                var (_, _, f?) = tmp~dict::delete_get_min(267);
                counter += 1;
                if(counter == const::moderators_max) {
                    throw(err::too_much);
                }
            } until( ~ f?);
            storage::moderators = new_moderators;
            save_data();
            return();
        } else { 
            throw(err::dict_empty); 
        }
    }

    if(op == op::withdraw_ton) {
        throw_unless(err::out_of_gas, msg_value >= gas::transaction);

        raw_reserve(gas::min_for_storage, 0);

        var msg = begin_cell()
                    .store_uint(flags::unbounceable, 6)
                    .store_slice(storage::owner_address)
                    .store_coins(0)
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
                    .store_slice("Tons successfully withdrawn!");

        send_raw_message(msg.end_cell(), mode::carry_remaining_balance + mode::ignore_errors);

        return();            
    }

    throw(op::unknown);
}

(int, cell, slice) get_collection_data() method_id {
  load_data();
  return (storage::p2p_next_id, storage::content, storage::owner_address);
}

(slice) get_owner_address() method_id {
    load_data();
    return storage::owner_address;
}

(cell) get_list() method_id {
    load_data();
    return storage::moderators;
}

(int) get_is_moderator(slice address) method_id {
    load_data();
    (slice moderator_address, int success) = storage::moderators.dict_get?(267, address);
    if(success) {
        return true;
    } else { return false; }
}

